@model IFarmacias.Models.Response.McdtResponse

@{
    bool isEdit = Model.IdMcdt > 0;
    bool isReadonly = ViewBag.Readonly != null && ViewBag.Readonly == true;

    HtmlString modalTitle;

    if (isReadonly) { modalTitle = new HtmlString("Ver"); }
    else if (isEdit) { modalTitle = new HtmlString("Editar"); }
    else { modalTitle = new HtmlString("Inserir"); }
}

<div class="modal-dialog modal-lg" role="document">
    <!--Content-->
    <div class="modal-content">
        <!--Header-->
        <div class="modal-header">
            <div class="btn-group mdbc-modal-action">
                @if (isReadonly)
                {
                    @Ajax.ActionLink("edit", "_ModalEditMcdt",
                    new
                    {
                        idConsulta = ViewBag.idConsulta,
                        idMcdt = Model.IdMcdt
                    },
                    new AjaxOptions()
                    {
                        UpdateTargetId = "modalMCDT",
                        InsertionMode = InsertionMode.Replace,
                        OnSuccess = "onModalLoaded",
                        OnBegin = "onModalLoading"
                    },
                    new
                    {
                        @class = "material-icons",
                        data_target = "#modalMCDT"
                    })

                        <!--Trigger-->
                    <a class="material-icons" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">more_vert</a>

                        <!--Menu-->
                        <div class="dropdown-menu dropdown-menu-right">
                            @Ajax.ActionLink("Eliminar", "DeleteMcdt",
                        new
                        {
                            idConsulta = ViewBag.idConsulta,
                            idMcdt = Model.IdMcdt
                        },
                        new AjaxOptions()
                        {
                            UpdateTargetId = "panelMcdt",
                            InsertionMode = InsertionMode.Replace,
                            OnFailure = "onModalError",
                            OnComplete = "onModalSubmited",
                            OnBegin = "confirmAction"
                        },
                        new
                        {
                            data_toggle = "popover",
                            data_placement = "bottom",
                            data_content = "Tem certeza que deseja remover o mcdt?",
                            title = "Confirmar",
                            @class = "dropdown-item"
                        })
                        </div>
                }
                <a class="close material-icons" data-dismiss="modal" aria-label="Close">close</a>
            </div>

            <h4 class="modal-title" id="myModalLabel">@modalTitle MCDT</h4>
        </div>
        <!--Body-->
        <div class="modal-body">
            @using (Ajax.BeginForm("AddEditMcdt",
                new { idConsulta = ViewBag.idConsulta },
                new AjaxOptions
                {
                    UpdateTargetId = "panelMcdt",
                    InsertionMode = InsertionMode.Replace,
                    OnComplete = "onModalSubmited"
                }))
            {
                <h5><strong>Dados gerais MCDT</strong></h5>
                <br />
                @Html.HiddenFor(x => x.IdMcdt)
                <div class="col-11 col-centered">
                    <div class="md-form">
                        @(!isReadonly ? Html.TextBoxFor(x => x.RequirementNumber, new { @class = "form-control" }) :
                              Html.TextBoxFor(x => x.RequirementNumber, new { @class = "form-control", @readonly = true }))
                        @Html.LabelFor(x => x.RequirementNumber)
                    </div>

                    <div class="md-form">
                        @(!isReadonly ? Html.TextBoxFor(x => x.Pin, new { @class = "form-control" }) :
                              Html.TextBoxFor(x => x.Pin, new { @class = "form-control", @readonly = true }))
                        @Html.LabelFor(x => x.Pin)
                    </div>

                    @*<div class="md-form">
                        @(!isReadonly ? Html.TextBoxFor(x => x.AccessCode, new { @class = "form-control" }) :
                              Html.TextBoxFor(x => x.AccessCode, new { @class = "form-control", @readonly = true }))
                        @Html.LabelFor(x => x.AccessCode)
                    </div>

                    <div class="md-form">
                        @(!isReadonly ? Html.TextBoxFor(x => x.OptionDirectCode, new { @class = "form-control" }) :
                              Html.TextBoxFor(x => x.OptionDirectCode, new { @class = "form-control", @readonly = true }))
                        @Html.LabelFor(x => x.OptionDirectCode)
                    </div>*@
                    <button id="btnSubmit" type="submit" class="hidden-xs-up">Submeter</button>
                </div>
                <hr />
            }
            <h5><strong>Exames</strong></h5>
            <br />
            <div id="modalMcdtTable">
                @Html.Action("_ModalMcdtTable", new { isReadonly })
            </div>
        </div>
        <!--Footer-->
        @if (!isReadonly)
        {
            <div class="modal-footer">
                <button type="button" class="btn-flat red-text waves-effect" data-dismiss="modal">Cancelar</button>
                <button type="submit" data-remote="#btnSubmit" class="btn-flat blue-text waves-effect">Submeter</button>
            </div>
        }
    </div>
    <!--/.Content-->
</div>
